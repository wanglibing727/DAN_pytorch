# encoding: utf-8"""@Time: 2021-07-19 16:09 @Author: Libing Wang@File: dataset_scene.py @description: 编写 Dataset类，继承 torch 的 Dataset 类"""import lmdbimport siximport sysimport cv2import randomimport numpy as npfrom PIL import Imagefrom torch.utils.data import Datasetclass LmdbDataset(Dataset):    def __init__(self, roots=None, img_h=32, img_w=128, transform=None, global_state="Train"):        self.envs = []        self.n_samples = 0        self.ratio = []        self.global_state = global_state        self.transform = transform        self.env = lmdb.open(roots, max_readers=1, readonly=True, lock=False, readahead=False, meminit=False)        if not self.env:            print("can not create lmdb from %s" % roots)            sys.exit(0)        with self.env.begin(write=False) as txn:            self.n_samples = int(txn.get("num-samples".encode()))        self.img_h = img_h        self.img_w = img_w        self.target_ratio = img_w / float(img_h)    def resize(self, img):        cur_ratio = img.size[0] / float(img.size[1])        mask_h = self.img_h        mask_w = self.img_w        img = np.array(img)        if len(img.shape) == 3:            img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)        if cur_ratio > self.target_ratio:            cur_h = self.img_h            cur_w = self.img_w        else:            cur_h = self.img_h            cur_w = int(self.img_h * cur_ratio)        img = cv2.resize(img, (cur_w, cur_h))        start_y = (mask_h - img.shape[0]) // 2        start_x = (mask_w - img.shape[1]) // 2        mask = np.zeros([mask_h, mask_w]).astype(np.uint8)        mask[start_y: start_y + img.shape[0], start_x: start_x + img.shape[1]] = img        return mask    def __len__(self):        return self.n_samples    def __getitem__(self, item):        # assert item <= len(self), "index range error"        item += 1        with self.env.begin(write=False) as txn:            img_key = "image-%09d" % item            try:                img_buf = txn.get(img_key.encode())                buf = six.BytesIO()                buf.write(img_buf)                buf.seek(0)                img = Image.open(buf)            except Exception:                print("corrupted image for %d" % item)                return self[item + 1]  # 调用 __getitem__ 方法 (下一个索引), 学会这种写法            label_key = "label-%09d" % item            label = str(txn.get(label_key.encode()).decode())            # TODO 修改这块的长度            if len(label) > 24 and (self.global_state is "Train" or self.global_state is "train"):                print("sample too long")                return self[item + 1]            try:                img = self.resize(img)            except Exception:                print("index %d img resize error" % item)                return self[item + 1]            if self.transform:                img = self.transform(img)            sample = {"image": img, "label": label}            return sample